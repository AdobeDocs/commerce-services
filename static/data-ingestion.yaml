openapi: 3.0.3
info:
  title: Data Ingestion API
  description: Data Ingestion API for Adobe Commerce is responsible for ingesting data from Adobe Commerce into the Adobe Commerce SaaS Platform.
  version: 1.0.0
servers:
  - url: https://commerce.adobe.io/feeds/
    description: Production endpoint

tags:
  - name: metadata (TODO)
    description: Product Metadata API
  - name: scopes
    description: Scope Feed API
  - name: products (TODO)
    description: Product API to manage product data, prices, permissions
  - name: categories (TODO)
    description: Category API
paths:
  /api/v1/catalog/products/{DATA_SPACE_ID}:
    put:
      tags:
        - products
      summary: Product Feed API
      description: >
        Create a new or replace existing Product entity in given `sku` and `scopes`. If product with same data exists for the same SKU and scopes item will be ignored.
      operationId: ProductsPost
      parameters:
        - $ref: '#/components/parameters/DATA_SPACE_ID'
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/xApiKey'
        - $ref: '#/components/parameters/xGwSignature'
        - $ref: '#/components/parameters/ContentEncoding'
      responses:
        '202':
          $ref: '#/components/responses/AcceptedResponse'
        '400':
          $ref: '#/components/responses/InvalidItemsResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FeedProduct'
            examples:
              SimpleProductWithImages:
                summary: Simple Product with images
                description: Simple Product with images
                value:
                  [
                    {
                      "sku": "red-pants",
                      "scope": {
                        "locale": "en"
                      },
                      "name": "red pants",
                      "slug": "red-pants.html",
                      "status": "ENABLED",
                      "description": "long description about red pants",
                      "shortDescription": "just pants",
                      "roles": [
                        "SEARCH",
                        "CATALOG"
                      ],
                      "metaTags": {
                        "title": " ",
                        "description": "some seo stuff",
                        "keywords": [
                          "pants",
                          "seo",
                          "words"
                        ]
                      },
                      "attributes": [
                        {
                          "code": "cost",
                          "type": "NUMBER",
                          "values": [
                            "10.5"
                          ]
                        },
                        {
                          "code": "states",
                          "type": "ARRAY",
                          "values": [
                            "TX",
                            "CA",
                            "NV"
                          ]
                        }
                      ],
                      "images": [
                        {
                          "url": "https://example.com",
                          "label": "photo of my pants!",
                          "roles": [
                            "PDP",
                            "plp"
                          ]
                        }
                      ],
                      "links": [
                        {
                          "sku": "green-pants",
                          "type": "related"
                        }
                      ],
                      "routes": [
                        {
                          "path": "red-pants"
                        },
                        {
                          "path": "pants/red-pants",
                          "position": 1
                        }
                      ],
                      "options": [
                        {
                          "id": "ABCDEFGHIJKLMNOPQRSTUVWXYZAB",
                          "type": "SWATCH",
                          "values": [
                            {
                              "id": "value-id",
                              "sku": "produc1",
                              "label": "value label",
                              "colorHex": "#000000",
                              "imageUrl": "https://example.com/image.png"
                            }
                          ],
                          "label": "option label",
                          "required": true,
                          "defaultValueId": "no"
                        }
                      ]
                    },
                  ]
    patch:
      tags:
        - products
      summary: Product Feed API
      description: Update Product entity for given `sku` and `scopes`
      operationId: ProductsPut
      parameters:
        - $ref: '#/components/parameters/DATA_SPACE_ID'
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/xApiKey'
        - $ref: '#/components/parameters/xGwSignature'
        - $ref: '#/components/parameters/ContentEncoding'
      responses:
        '202':
          $ref: '#/components/responses/AcceptedResponse'
        '400':
          $ref: '#/components/responses/InvalidItemsResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FeedProduct'
            examples:
              SimpleProductWithImages:
                summary: Update simple Product with images
                description: Update simple Product with images
                value:
                  [
                    {
                      "sku": "red-pants",
                      "scope": {
                        "locale": "en"
                      },
                      "name": "Updated - red pants",
                      "slug": "updated - red-pants.html",
                      "status": "DISABLED",
                      "description": "Updated - long description about red pants",
                      "shortDescription": "Updated - just pants",
                      "roles": [
                        "SEARCH"
                      ],
                      "metaTags": {
                        "title": "Updated - Red",
                        "description": "Updated - some seo stuff",
                        "keywords": [
                          "updated - pants",
                          "updated - edited",
                          "updated - edited"
                        ]
                      },
                      "attributes": [
                        {
                          "code": "cost",
                          "type": "NUMBER",
                          "values": [
                            "11.5"
                          ]
                        },
                        {
                          "code": "states",
                          "type": "ARRAY",
                          "values": [
                            "TX",
                            "CA",
                            "OK",
                            "HI"
                          ]
                        }
                      ],
                      "images": [
                        {
                          "url": "https://example.com",
                          "label": "updated - photo of my pants!",
                          "roles": [
                            "PDP",
                            "plp"
                          ]
                        }
                      ],
                      "links": [
                        {
                          "sku": "gray-pants",
                          "type": "related"
                        }
                      ],
                      "routes": [
                        {
                          "path": "updated-red-pants"
                        },
                        {
                          "path": "updated-pants/red-pants",
                          "position": 1
                        }
                      ],
                      "options": [
                        {
                          "id": "ABCDEFGHIJKLMNOPQRSTUVWXYZAB",
                          "type": "SWATCH",
                          "values": [
                            {
                              "id": "value-id",
                              "sku": "product1",
                              "label": "updeated - value label",
                              "colorHex": "#000000",
                              "imageUrl": "https://example.com/image.png"
                            }
                          ],
                          "label": "updeated - option label",
                          "required": false,
                          "defaultValueId": "no"
                        }
                      ]
                    }
                  ]
    delete:
      tags:
        - products
      summary: Product Feed API
      description: >
        Delete Product entity for given `sku` and `scopes`
      operationId: ProductsDelete
      parameters:
        - $ref: '#/components/parameters/DATA_SPACE_ID'
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/xApiKey'
        - $ref: '#/components/parameters/xGwSignature'
        - $ref: '#/components/parameters/ContentEncoding'
      responses:
        '202':
          $ref: '#/components/responses/AcceptedResponse'
        '400':
          $ref: '#/components/responses/InvalidItemsResponse'
        '403':
          $ref: '#/components/responses/UnauthorizedResponse'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FeedProduct'
            examples:
              SimpleProductWithImages:
                summary: Delete Product
                description: Delete Product
                value:
                  [
                    {
                      "sku": "red-pants",
                      "scopes": {
                        "locale": "English"
                      },
                      "name": "Red pants",
                      "modifiedAt": "2023-06-29 22:30:19"
                    }
                  ]
  /scopes/v2/{DATA_SPACE_ID}:
    post:
      tags:
        - scopes
      summary: Scope Feed API
      description: Register and update relationships between customer group codes, websites and store views
      operationId: PostV1Scopes
      parameters:
        - name: DATA_SPACE_ID
          in: path
          description: Data Space ID
          required: true
          style: simple
          schema:
            type: string
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            enum: [application/json]
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
          description: Production public API key
        - name: x-gw-signature
          in: header
          required: true
          schema:
            type: string
          description: JWT generated for Production public API key
        - name: Content-Encoding
          in: header
          required: false
          schema:
            type: string
            enum: [gzip]
          description: Use this header if the payload is compressed with gzip
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/WebsiteScopeFeedItem'
                  - $ref: '#/components/schemas/CustomerGroupScopeFeedItem'
            examples:
              CreateWebsites:
                summary: Create websites with stores and store views
                value:
                  [
                    {
                      "website": {
                        "websiteCode": " base",
                        "stores": [
                          {
                            "storeCode": "main_website_store",
                            "storeViews": [
                              {
                                "storeViewCode": "default"
                              }
                            ]
                          }
                        ]
                      },
                      "updatedAt": "2023-02-22T21:43:00+00:00",
                      "deleted": false
                    }
                  ]
              CreateCustomerGroups:
                summary: Create customer groups
                value:
                  [
                    {
                      "customerGroup": {
                        "customerGroupCode": "General",
                        "websites": [
                          {
                            "websiteCode": "us"
                          }
                        ]
                      },
                      "updatedAt": "2023-07-21T21:09:06+00:00",
                      "deleted": false
                    }
                  ]
      responses:
        '200':
          description: Request accepted. Check the "invalidFeedItems" node for any invalid items that were not consumed
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ProcessItemsPublishingResponse'
        '400':
          description: All feed items received were not valid. Check response body for errors
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/400ProcessFeedResponse'
        '403':
          description: Unauthorized request. Validate the "x-api-key" value and ensure the JWT is not expired in "x-gw-signature"
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/403Response'
components:
  responses:
    AcceptedResponse:
      description: All feed items accepted and will be processed asynchronously
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/ProcessFeedResponse'
    InvalidItemsResponse:
      description: One or all received feed items are not valid. Check the "invalidFeedItems" node for details
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/400ProcessFeedResponse'
    UnauthorizedResponse:
      description: Unauthorized request. Verify the "x-api-key" value is correct and ensure the JWT is not expired in "x-gw-signature"
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: '#/components/schemas/403Response'
  parameters:
    DATA_SPACE_ID:
      name: DATA_SPACE_ID
      in: path
      description: Data Space ID. See docs https://experienceleague.adobe.com/docs/commerce-admin/config/services/saas.html
      required: true
      style: simple
      schema:
        type: string
    ContentType:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        enum: [application/json]
    xApiKey:
      name: x-api-key
      in: header
      required: true
      schema:
        type: string
      description: Production public API key
    xGwSignature:
      name: x-gw-signature
      in: header
      required: true
      schema:
        type: string
      description: JWT generated for Production public API key
    ContentEncoding:
      name: Content-Encoding
      in: header
      required: false
      schema:
        type: string
        enum: [gzip]
      description: Use this header if the payload is compressed with gzip

  schemas:
    DiscountsFinalPrice:
      title: Final Price
      type: object
      properties:
        code:
          type: object
        price:
          type: number
          format: float
    DiscountsPercentage:
      title: Discount
      type: object
      properties:
        code:
          type: object
        percentage:
          type: number
          format: float
    FeedBreadcrumb:
      title: FeedBreadcrumb
      type: object
      properties:
        categoryId:
          type: string
          description: Category ID
        categoryLevel:
          type: integer
          description: The category level
          format: int32
        categoryName:
          type: string
          description: The name of the category
        categoryUrlKey:
          type: string
          description: The URL key for the category
        categoryUrlPath:
          type: string
          description: The URL path to the category
    FeedCategory:
      title: FeedCategory
      required:
        - categoryId
        - websiteCode
        - storeCode
        - storeViewCode
        - name
        - path
        - urlKey
        - urlPath
        - isActive
        - deleted
        - modifiedAt
      type: object
      properties:
        categoryId:
          type: string
          description: Category unique identifier
          example: '3'
        websiteCode:
          type: string
          description: Website identifier code
        storeCode:
          type: string
          description: Store identifier code
        storeViewCode:
          type: string
          description: StoreView identifier code
        name:
          type: string
          description: Name of the category
          example: Cat 201028
        path:
          type: string
          description: Category path must follow pattern `{root categoryId}/{parent categoryId}*/{current CategoryId}`, e.g. `1/2/3`
          example: 1/2/3
        urlKey:
          type: string
          description: SEO URL key for _this_ category
          example: category-201028-child-category
        urlPath:
          type: string
          description: SEO URL path for the category. Should included parent category urlPath
          example: category-201028/category-201028-child-category
        isActive:
          type: boolean
          description: Whether the category is active
          example: false
        deleted:
          type: boolean
          description: Whether the category is deleted or not
          example: false
        modifiedAt:
          type: string
          description: Timestamp when the product was last modified.
          example: '2022-10-21 02:15:30'
          format: yyyy-MM-dd HH:mm:ss
        level:
          type: integer
          description: The category depth level.
          format: int32
          example: 2
        availableSortBy:
          type: array
          description: A list describing the properties that can be used for displaying the available products
          example: '["position", "name"]'
          items:
            type: string
        breadcrumbs:
          type: array
          description: A list of FeedBreadcrumb objects; can be null
          items:
            $ref: '#/components/schemas/FeedBreadcrumb'
        children:
          type: array
          description: A list of child categories
          example: '["12", "13"]'
          items:
            type: string
        createdAt:
          type: string
          description: Timestamp when the category was created
          example: '2022-10-21 02:15:30'
          format: yyyy-MM-dd HH:mm:ss
        defaultSortBy:
          type: string
          description: A string describing the property that is used for displaying the available products by default
          example: price
        description:
          type: string
          description: Natural language description of the category
          example: Collection of products
        displayMode:
          type: string
          description: The display mode
          example: PRODUCTS
        image:
          type: string
          description: URL of the associated image
          example: http://path/to/image.jpg
        includeInMenu:
          type: boolean
          description: Whether to include the category in the menu
          example: false
        isAnchor:
          type: boolean
          description: Boolean indicating whether the category is an anchor
          example: false
        metaDescription:
          type: string
          description: SEO meta description of the category
          example: Category 1
        metaKeywords:
          type: string
          description: SEO meta keywords of the category
          example: Category 1
        metaTitle:
          type: string
          description: SEO meta title of the category
          example: Category 1
        pathInStore:
          type: string
          example: '10'
        position:
          type: integer
          description: Position in the listing
          format: int32
          example: 2
        updatedAt:
          type: string
          description: Timestamp when the product was updated in the admin console.
          example: '2022-10-21 02:15:30'
          format: yyyy-MM-dd HH:mm:ss
    FeedItemFailedValidationResult:
      title: FeedItemFailedValidationResult
      type: object
      properties:
        code:
          type: string
          description: code name of invalid field
        itemIndex:
          type: integer
          format: int32
          description: Reference to the feed line item with invalid payload. Starting from 0
        message:
          type: string
          description: Error description
    FeedProduct:
      title: Catalog Product payload
      type: object
      required:
        - sku
        - scopes
        - name
        - slug
        - status
      properties:
        sku:
          type: string
          description: Product unique identifier
          example: MH01
        scopes:
          type: object
          description: Product scope
          items:
            $ref: '#/components/schemas/ProductScope'
        name:
          type: string
          description: Product name
          example: Kangaroo Hoodie
        slug:
          type: string
          description: The URL key of the product
          example: kangaroo-hoodie.html
        description:
          type: string
          description: A description of the product
          example: A kangaroo hoodie for all seasons
        shortDescription:
          type: string
          description: A short description of the product
          example: A hoodie for all seasons with a kangaroo pocket
        status:
          type: string
          description: Enabled (Product is visible on the storefront) / Disabled (Product is not visible on the storefront)
          example: ENABLED
          enum:
            - ENABLED
            - DISABLED
        roles:
          type: array
          description: >
            Storefront area where the product is visible. Empty list means product should not visible individually
            * `CATALOG`: Product is visible in the PLP (product listing page) and PDP (product detail page)
            * `SEARCH`: Product is visible in the SRP (search result page) and PDP (product detail page)
            * `CATALOG, SEARCH`: Product is visible in the PLP, SRP, and PDP
          example: [CATALOG]
          enum:
            - CATALOG
            - SEARCH
          items:
            type: string
        metaTags:
          type: object
          description: Meta attributes that will be specified in <meta> tags
          items:
            $ref: '#/components/schemas/ProductMetaAttribute'
        attributes:
          type: array
          description: A list of product attributes
          items:
            $ref: '#/components/schemas/ProductAttribute'
        images:
          type: array
          description: A list of product images
          items:
            $ref: '#/components/schemas/ProductImage'
        links:
          type: array
          description: List of linked SKUs
          items:
            $ref: '#/components/schemas/ProductLink'
        routes:
          type: array
          description: List of product routes
          items:
            $ref: '#/components/schemas/ProductRoutes'
        options:
          type: array
          description: Options associated with the product
          items:
            $ref: '#/components/schemas/ProductOption'
        createdAt:
          type: string
          description: Timestamp when the product was created
          example: '2024-06-21 02:15:30'
          format: yyyy-MM-dd HH:mm:ss
        modifiedAt:
          type: string
          description: >
            Timestamp when the product was last modified.
            The new value must be greater than the previous value to accept product update
          example: '2024-09-42 02:15:30'
          format: yyyy-MM-dd HH:mm:ss
    ProductScope:
      title: Product Scope
      type: object
      required:
        - locale
      properties:
        locale:
          type: string
          description: the single value that represents content locale, for example, English.
          example: English
    ProductMetaAttribute:
      title: Meta Attributes
      type: object
      properties:
        title:
          type: string
          description: A meta title
        keywords:
          type: array
          description: A meta keywords
          items:
            type: string
        description:
          type: string
          description: A meta description
    ProductAttribute:
      title: Product Attribute
      type: object
      required:
        - code
        - type
        - values
      properties:
        code:
          type: string
          description: Product Attribute Code
        type:
          enum:
            - BOOLEAN
            - NUMBER
            - STRING
            - ARRAY
            - OBJECT
          description: >
            Type of attribute value that will be applied on rendering pahse. Validation will be applied only on rendereing phase. Wrong values would be silently ignored
            * `BOOLEAN`: Accept single value: "true" or false
            * `Number`: Accept single number,e.g. "85", "0.42", etc.
            * `STRING`: Accept single string,e.g. "Great day, yall!"
            * `STRING`: Accept list of strings ,e.g. ["red", "green", "blue"]
            * `OBJECT`: Accept JSON object `"{"name": "swatch", "color": "red"}"`
        values:
          type: array
          description: A list of value(s) associated to a given type.
          items:
            type: string
    ProductRoutes:
      title: Routes
      type: object
      required:
        - path
      properties:
        path:
          type: string
          description: URL path
        position:
          type: integer
          description: Position of a product in this path, default 0.
          format: int32
    ProductImage:
      title: Product Image
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: Media resource URL
        label:
          type: string
          description: Media resource label
        roles:
          type: array
          description: >
            roles associated with this image, for example: image for PDP, PLP etc.
          items:
            type: string
    ProductOption:
      title: ProductOption
      type: object
      required:
        - id
        - type
        - values
      properties:
        id:
          type: string
          description: Product Option ID
        label:
          type: string
          description: Option label
        required:
          type: boolean
          description: Whether the option is required for selection
          example: false
        defaultValueId:
          type: string
          description: Pre-selected value for the option
        type:
          type: string
          enum:
            - CONFIGURABLE
            - BUNDLE
            - SWATCH
          description: >
            Option type. Additionally to prefedined types, custom types can be used
            * `CONFIGURABLE`: Configurable product option
            * `BUNDLE`: Bundle product option
            * `SWATCH`: Swatch product option
        values:
          type: array
          description: A list of option values
          items:
            $ref: '#/components/schemas/ProductOptionValue'
    ProductOptionValue:
      title: ProductOptionValue
      type: object
      required:
        - id
        - sku
      properties:
        id:
          type: string
          description: Option value ID. For "CONFIGURABLE" type, must be equal to the "attribute code"
        label:
          type: string
          description: Option value label
        colorHex:
          type: string
          description: A hex representation of the color of the option value
        imageUrl:
          type: string
          description: Image URL of the option value
        sku:
          type: string
          description: Product SKU associated to the option value
    ProductLink:
      title: Links
      required:
        - type
        - sku
      type: object
      properties:
        type:
          type: string
          description: Product link type. Additionally to predefined types, custom types can be used
        sku:
          type: string
          description: SKU
      description: Product association
    ItemFailedValidationResult:
      title: ItemFailedValidationResult
      type: object
      properties:
        code:
          type: string
          description: Code of the validation error
        itemIndex:
          type: integer
          description: Index of the conflicting item in the feed
          format: int32
        message:
          type: string
          description: Message of the validation error for the item
        value:
          type: string
          description: The value supplied to the API
    ProcessFeedResponse:
      title: Response payload
      type: object
      properties:
        feedItemReceivedCount:
          type: integer
          description: Number of valid feed items received and processed
          format: int32
        invalidFeedItems:
          type: array
          description: List of feed items that did not pass the validation. Fix the payload for invalid items before resubmitting the feed
          items:
            $ref: '#/components/schemas/FeedItemFailedValidationResult'
      example:
        {
          "feedItemReceivedCount": 2,
          "invalidFeedItems": [
            {
              "itemIndex": 1,
              "code": "{error code}",
              "message": "{error message}"
            }
          ]
        }
    400ProcessFeedResponse:
      title: Response payload
      type: object
      properties:
        feedItemReceivedCount:
          type: integer
          description: 0 valid feed items
          format: int32
          default: 0
        invalidFeedItems:
          type: array
          description: List of feed items that did not pass the validation. Fix the payload for invalid items before resubmitting the feed
          items:
            $ref: '#/components/schemas/FeedItemFailedValidationResult'
      example:
        {
          "feedItemReceivedCount": 0,
          "invalidFeedItems": [
            {
              "itemIndex": 0,
              "code": "{error code}",
              "message": "{error message}"
            },
            {
              "itemIndex": 1,
              "code": "{error code}",
              "message": "{error message}"
            }
          ]
        }
    403Response:
      title: 403 Forbidden
      type: object
      oneOf:
        - title: 403 Unauthorized - invalid JWT
          type: object
          properties:
            error_code:
              type: string
              description: Error code
            message:
              type: string
              description: Error message
          example:
            {
              "error_code":"403053",
              "message":"JWT is invalid"
            }
        - title: 403 Unauthorized
          type: object
          properties:
            error:
              type: object
              properties:
                code:
                  type: string
                  description: Error code
                message:
                  type: string
                  description: Error message
                details:
                  type: object
                  properties:
                    error_code:
                      type: string
                      description: Error code
          example:
            {
              "error": {
                "code": "Forbidden",
                "message": "Client ID is missing",
                "details": {
                  "error_code": "403000"
                }
              }
            }



    ProcessItemsPublishingResponse:
      title: ProcessItemsPublishingResponse
      type: object
      properties:
        feedItemReceivedCount:
          type: integer
          description: Number of valid feed items received and processed
          format: int32
        invalidFeedItems:
          type: array
          description: List of feed items that did not pass validation
          items:
            $ref: '#/components/schemas/ItemFailedValidationResult'
    WebsiteScopeFeedItem:
      title: Website Scope
      type: object
      properties:
        website:
          type: object
          properties:
            websiteCode:
              type: string
            stores:
              type: array
              items:
                type: object
                properties:
                  storeCode:
                    type: string
                  storeViews:
                    type: array
                    items:
                      type: object
                      properties:
                        storeViewCode:
                          type: string
        deleted:
          type: boolean
        updatedAt:
          type: string
          description: Time in RFC 3339 standard
          example: "2023-06-13T12:20:19+00:00"
    CustomerGroupScopeFeedItem:
      title: Customer Group Scope
      type: object
      properties:
        customerGroup:
          type: object
          properties:
            customerGroupCode:
              type: string
            websites:
              type: array
              items:
                type: object
                properties:
                  websiteCode:
                    type: string
        deleted:
          type: boolean
        updatedAt:
          type: string
          description: Time in RFC 3339 standard
          example: "2023-06-13T12:20:19+00:00"